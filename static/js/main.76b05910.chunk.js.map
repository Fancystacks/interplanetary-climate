{"version":3,"sources":["helpers.js","api.js","components/ClimateStyling.js","components/ClimateData.js","components/InfoStyling.js","components/Info.js","components/UnitStyling.js","components/Unit.js","components/PreviousStyling.js","components/Previous.js","AppStyles.js","App.js","serviceWorker.js","index.js"],"names":["formatTemperature","temperature","isMetric","displayTemp","Math","round","API_URL","Wrapper","styled","div","Date","Temp","Wind","props","deg","ClimateData","sol","date","className","maxTemp","minTemp","windDirection","windSpeed","InfoStyling","Info","UnitStyling","Toggle","button","metric","Unit","setMetric","htmlFor","onClick","prev","PreviousWrapper","previous","PreviousDays","PreviousDay","Previous","weather","setPrevious","setSelectedSol","map","i","key","GlobalStyle","createGlobalStyle","AppWrapper","MarsClimate","main","InfoWrapper","App","useState","loading","setLoading","setWeather","selectSol","console","log","useEffect","a","fetch","json","marsWeather","sol_keys","solKey","AT","mx","mn","HWS","av","WD","most_uncommon","compass_degrees","First_UTC","toLocaleDateString","undefined","day","month","year","length","getFromApi","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.76b05910.chunk.js","sourcesContent":["export const formatDate = (date) => \ndate.toLocaleDateString(undefined, { day: 'numeric', month: 'long', year: 'numeric' });\n\nexport const formatTemperature = (temperature, isMetric) => {\n    let displayTemp = temperature;\n    if (!isMetric) {\n        displayTemp = (temperature - 32) * (5 / 9);\n    }\n    return Math.round(displayTemp);\n}","const API_KEY = \"9dAc7CifCLpk1j7m1dmFj80idWZeB4Tp16jKGden\";\nexport const API_URL = `https://api.nasa.gov/insight_weather/?api_key=${API_KEY}&feedtype=json&ver=1.0`;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  grid-gap: 1em;\n  padding: 40px 0;\n`;\n\nexport const Date = styled.div`\n  h2 {\n    font-size: var(--fs-xl);\n    margin: 0;\n  }\n  p {\n    font-size: var(--fs-h2);\n    margin: 0;\n    color: var(--clr-gray);\n    font-weight: var(--fw-light);\n  }\n`;\n\nexport const Temp = styled.div`\n  padding: 0;\n`;\n\nexport const Wind = styled.div`\n  display: grid;\n  .section-title,\n  .reading {\n    grid-column: 2 / 3;\n  }\n  .wind-direction {\n    --size: 7rem;\n    width: var(--size);\n    height: var(--size);\n    border-radius: 50%;\n    background-color: rgba(255, 255, 255, 0.5);\n    display: -ms-grid;\n    display: grid;\n    place-items: center;\n    grid-row: 1 / span 2;\n  }\n  .wind-arrow {\n    --direction: ${(props) => props.deg + 'deg'};\n    --size: 0.8rem;\n    height: calc(var(--size) * 3);\n    width: var(--size);\n    background: var(--clr-accent-dark);\n    clip-path: polygon(50% 0, 0% 100%, 100% 100%);\n    transform: translateY(-50%) rotate(var(--direction));\n    transform-origin: bottom center;\n    transition: -webkit-transform 500ms ease;\n    transition: transform 500ms ease;\n    transition: transform 500ms ease, -webkit-transform 500ms ease;\n  }\n`;","import React from 'react';\n// Helpers\nimport { formatTemperature } from '../helpers';\n// Styles\nimport { Wrapper, Date, Temp, Wind } from './ClimateStyling';\n\nconst ClimateData = ({ sol, isMetric }) => (\n  <Wrapper>\n    <Date>\n      <h2>{sol.sol}</h2>\n      <p>{sol.date}</p>\n    </Date>\n\n    <Temp>\n      <h2 className='section-title'>Temperature</h2>\n      <br/>\n      <p className='reading'>\n        High:\n        <span> {formatTemperature(sol.maxTemp, isMetric)}</span>째\n        <span> {isMetric ? 'C' : 'F'}</span>\n      </p>\n      <p className='reading'>\n        Low:\n        <span> {formatTemperature(sol.minTemp, isMetric)}</span>째\n        <span> {isMetric ? 'C' : 'F'}</span>\n      </p>\n    </Temp>\n\n    <Wind deg={sol.windDirection}>\n      <h2 className='section-title'>Wind</h2>\n      <p className='reading'>\n        <span>{sol.windSpeed}</span>\n        <span>{isMetric ? ' kmh' : ' mph'}</span>\n      </p>\n\n      <div className='wind-direction'>\n        <div className='wind-arrow'></div>\n      </div>\n    </Wind>\n  </Wrapper>\n);\n\nexport default ClimateData;","import styled from 'styled-components';\n\nexport const InfoStyling = styled.div`\ngrid-column: 1 / 3;\ncolor: var(--clr-accent);\n`;","import React from 'react';\nimport { InfoStyling } from './InfoStyling';\n\nconst Info = () => (\n    <InfoStyling>\n        <p>\n        The Interior Exploration using Seismic Investigations (InSight) mission is a robotic lander designed to study the deep interior of the planet Mars. It will investigate processes that shaped the rocky planets of the inner solar system more than four billion years ago.\n        </p>\n    </InfoStyling>\n)\n\nexport default Info;","import styled from 'styled-components';\n\nexport const UnitStyling = styled.div`\n  place-self: end;\n  color: var(--clr-light);\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  opacity: 0.7;\n  transition: opacity 275ms linear;\n  :hover {\n    opacity: 1;\n  }\n`;\n\nexport const Toggle = styled.button`\n  cursor: pointer;\n  width: 5em;\n  border: 2px solid var(--clr-light);\n  background: transparent;\n  padding: 0;\n  border-radius: 100vmax;\n  margin: 0 1em;\n  ::after {\n    content: '';\n    display: block;\n    background: var(--clr-light);\n    border-radius: 50%;\n    height: 1rem;\n    margin: 2px;\n    margin-left: ${(props) => (props.metric ? '3px' : 'auto')};\n    width: 1rem;\n  }\n`;","import React from 'react';\nimport { UnitStyling, Toggle } from './UnitStyling';\n\nconst Unit = ({ metric, setMetric }) => (\n    <UnitStyling>\n        <label htmlFor='cel'>째C</label>\n        <Toggle metric={metric} onClick={() => setMetric((prev) => !prev)} />\n        <label htmlFor='fah'>째F</label>\n    </UnitStyling>\n)\n\nexport default Unit;","import styled from 'styled-components';\n\nexport const PreviousWrapper = styled.div`\n  background: var(--clr-dark);\n  color: var(--clr-light);\n  position: fixed;\n  opacity: .8;\n  bottom: 0;\n  font-family: 'Montserrat', sans-serif;\n  left: 0;\n  width: 100%;\n  transform: ${({ previous }) =>\n    previous ? 'translateY(0)' : 'translateY(60%)'};\n  transition: -webkit-transform 350ms ease;\n  transition: transform 350ms ease;\n  transition: transform 350ms ease, -webkit-transform 350ms ease;\n  padding: 0rem;\n  .previous-weather__title {\n    font-weight: 300;\n    text-align: ${({ previous }) => (previous ? 'center' : 'center')};\n    ${({ previous }) =>\n      previous ? 'animation: slideUpIn 750ms forwards;' : 'text-align: center'};\n  }\n  @-webkit-keyframes slideUpIn {\n    0% {\n      opacity: 0;\n      transform: translateY(50%);\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  @keyframes slideUpIn {\n    0% {\n      opacity: 0;\n      transform: translateY(50%);\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n`;\n\nexport const Toggle = styled.button`\n  position: fixed;\n  background: var(--clr-dark);\n  opacity: .8;\n  color: var(--clr-light);\n  left: 50%;\n  top: 60px;\n  width: 7rem;\n  transform: translate(-50%, calc(-100% - 3rem));\n  text-align: center;\n  font-size: var(--fs-h2);\n  line-height: 1.5;\n  clip-path: polygon(50% 0, 0 100%, 100% 100%);\n  cursor: pointer;\n  color: var(--clr-gray);\n  border: 0;\n  font-family: inherit;\n  :hover,\n  :focus {\n    color: var(--clr-light);\n  }\n  span {\n    display: block;\n    transform: ${({ previous }) =>\n      previous ? 'rotate(180deg) translateY(-6px)' : 'rotate(0)'};\n    transition: -webkit-transform 300ms ease;\n    transition: transform 300ms ease;\n    transition: transform 300ms ease, -webkit-transform 300ms ease;\n  }\n`;\n\nexport const PreviousDays = styled.div`\n  display: grid;\n  padding: 1rem;\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  justify-content: space-between;\n  height: 160px;\n  overflow: auto;\n`;\n\nexport const PreviousDay = styled.div`\n  opacity: 0;\n  ${({ previous }) => previous && 'animation: slideUpIn 750ms forwards;'};\n  margin: 10px 0;\n  \n  > * {\n    margin: 0;\n  }\n  .previous-day__date {\n    font-size: 0.9rem;\n    color: var(--clr-gray);\n  }\n  .previous-day__more-info {\n    cursor: pointer;\n    border: 0;\n    border-radius: 100vmax;\n    background: var(--clr-dark);\n    color: var(--clr-light);\n    text-transform: uppercase;\n    padding: 0.3em 1em;\n    margin-top: 1em;\n  }\n  .previous-day__more-info:hover {\n    background: var(--clr-gray);\n  }\n  :nth-child(1) {\n    animation-delay: 100ms;\n  }\n  :nth-child(2) {\n    animation-delay: 125ms;\n  }\n  :nth-child(3) {\n    animation-delay: 150ms;\n  }\n  :nth-child(4) {\n    animation-delay: 175ms;\n  }\n  :nth-child(5) {\n    animation-delay: 200ms;\n  }\n  :nth-child(6) {\n    animation-delay: 225ms;\n  }\n  :nth-child(7) {\n    animation-delay: 250ms;\n  }\n  .show-weather.previous-weather .previous-day:nth-child(7) {\n    animation-delay: 300ms;\n  }\n`;","import React from 'react';\n// Styles\nimport { PreviousWrapper, Toggle, PreviousDays, PreviousDay } from './PreviousStyling';\n\nconst Previous = ({ weather, previous, setPrevious, setSelectedSol, isMetric }) => (\n  <PreviousWrapper previous={previous}>\n    <Toggle htmlFor='weather-toggle'\n      onClick={() => setPrevious(prev => !prev)}\n      previous={previous}\n    >\n      <span>&#8679;</span>\n      <span className='sr-only'></span>\n    </Toggle>\n\n    <h2 className='main-title previous-weather__title'>View previous 7 day weather</h2>\n    <PreviousDays>\n      {weather.map((sol, i) => (\n        <PreviousDay key={sol.sol} previous={previous}>\n        <h4 className='previous-day__sol'>\n          <span>{sol.sol}</span>\n        </h4>\n        <p className='previous-day__date'>\n          {sol.date}\n        </p>\n        <p className='previous-day__temp'>\n          High:\n           <span>{sol.maxTemp}</span>\n          <span>{isMetric ? ' 째C' : ' 째F'}</span>\n        </p>\n        <p className='previous-day__temp'>\n          Low:\n           <span>{sol.minTemp}</span>\n          <span>{isMetric ? ' 째C' : ' 째F'}</span>\n        </p>\n        <button className='previous-day__more-info'\n          onClick={() => setSelectedSol(i)} > Additional Info</button>\n      </PreviousDay>\n      ))}\n    </PreviousDays>\n  </PreviousWrapper>\n);\n\nexport default Previous;","import styled, { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n  :root {\n    --fw-light: 300;\n    --fw-normal: 400;\n    --fw-semi: 500;\n    --fw-bold: 700;\n    --fs-h1: 1.5rem;\n    --fs-h2: 2.25rem;\n    --fs-body: 1rem;\n    --fs-xl: 4.5rem;\n    --clr-light: #fff;\n    --clr-gray: #989898;\n    --clr-dark: #444;\n    --clr-accent: #D06D6D;\n    --clr-accent-dark: #613131;\n  }\n  .sr-only:not(:focus):not(:active) {\n    clip: rect(0 0 0 0);\n    clip-path: inset(50%);\n    height: 1px;\n    overflow: hidden;\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n  }\n  body {\n    margin: 0;\n    font-family: 'Montserrat', sans-serif;\n    line-height: 1.6;\n    background-image: url(\"https://user-images.githubusercontent.com/38336934/80783794-27c6f080-8b38-11ea-9434-aa472ee22d50.jpg\");\n    background-size: cover;\n    height: 100vh;\n    color: var(--clr-light);\n  }\n  h1, h2, h3 {\n    line-height: 1;\n  }\n  a {\n    color: var(--clr-accent);\n  }\n  a:hover {\n    color: var(--clr-accent-dark);\n  }\n`;\n\nexport const AppWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 20px;\n`;\n\nexport const MarsClimate = styled.main`\n  background: rgba(0, 0, 0, 0.7);\n  padding: 2em;\n  display: inline;\n  max-width: 1000px;\n  margin: 40px 0;\n  border-radius: 10px;\n  .main-title {\n    font-size: var(--fs-h1);\n    font-weight: var(--fw-light);\n    text-transform: uppercase;\n    color: var(--clr-accent);\n    letter-spacing: 2px;\n    grid-column: 1 / -1;\n  }\n  .section-title {\n    font-size: var(--fs-h2);\n    font-weight: var(--fw-bold);\n    margin: 0;\n  }\n  .reading {\n    font-size: var(--fs-h1);\n    margin: 0;\n    color: var(--clr-gray);\n  }\n`;\n\nexport const InfoWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n`","import React, { useState, useEffect } from 'react';\nimport { formatDate } from './helpers';\nimport { API_URL } from './api';\nimport ClimateData from './components/ClimateData';\nimport Info from './components/Info';\nimport Unit from './components/Unit';\nimport Previous from './components/Previous';\nimport { AppWrapper, GlobalStyle, MarsClimate, InfoWrapper } from './AppStyles';\nimport { Toggle } from './components/UnitStyling';\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [weather, setWeather] = useState([]);\n  const [selectSol, setSelectedSol] = useState();\n  const [metric, setMetric] = useState(true);\n  const [previous, setPrevious] = useState(false);\n  console.log(weather);\n\n  useEffect(() => {\n    const getFromApi = async () => {\n      const weather = await (await fetch(API_URL)).json();\n      const marsWeather = weather.sol_keys.map(solKey => {\n        return {\n          sol: solKey,\n          // es2020 optional chaining, if found? || otherwise \"no data\"\n          maxTemp: weather[solKey].AT?.mx || 'No data was found',\n          minTemp: weather[solKey].AT?.mn || 'No data was found',\n          windSpeed: Math.round(weather[solKey].HWS?.av || 0),\n          windDirection: weather[solKey].WD?.most_uncommon?.compass_degrees || 0,\n          date: formatDate(new Date(weather[solKey].First_UTC))\n        }\n      });\n      setWeather(marsWeather);\n      setSelectedSol(marsWeather.length - 1);\n      setLoading(false);\n    }\n\n    getFromApi();\n\n  }, [])\n  return (\n    <>\n      <GlobalStyle />\n      <AppWrapper>\n        <MarsClimate>\n          {loading ? <div>Searching . . .</div> : (\n            <>\n            <h1 className=\"main-title\">Current Martian Atmospheric Conditions </h1>\n            <ClimateData sol={weather[selectSol]} isMetric={metric}/>\n            <InfoWrapper>\n              <Info/>\n              <Unit metric={metric} setMetric={setMetric}/>\n            </InfoWrapper>\n            </>\n          )}\n        </MarsClimate>\n        <Previous\n        weather={weather}\n        previous={previous}\n        setPrevious={setPrevious}\n        setSelectedSol={setSelectedSol}\n        isMetric={metric}/>\n      </AppWrapper>\n    </>\n  );\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}